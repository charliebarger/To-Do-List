{"version":3,"sources":["webpack://to-dolist/./src/burgerMenu.js","webpack://to-dolist/./src/createNewProject.js","webpack://to-dolist/./src/index.js","webpack://to-dolist/./src/popUpTaskForm.js","webpack://to-dolist/./src/projectEventListners.js","webpack://to-dolist/./src/projectTextfield.js","webpack://to-dolist/./src/selectTask.js","webpack://to-dolist/./src/storage.js","webpack://to-dolist/./src/taskTextfield.js","webpack://to-dolist/webpack/bootstrap","webpack://to-dolist/webpack/runtime/compat get default export","webpack://to-dolist/webpack/runtime/define property getters","webpack://to-dolist/webpack/runtime/hasOwnProperty shorthand","webpack://to-dolist/webpack/runtime/make namespace object","webpack://to-dolist/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;;AAEO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACd8C;AAC+C;;AAE7F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,2EAAmB;AAC3B;AACA;;AAEA;AACA;AACA;AACA,QAAQ,wEAAgB;AACxB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,sEAAe;AACvB;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA,IAAI,+DAAiB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChEyC;AACzC,WAAW,cAAc;AAC+B;AACR;AACF;AACM;AACpD;AACA,yDAAY;AACZ;AACA,yEAAqB;AACrB;AACA,iEAAsB;AACtB,qEAAoB;AACpB;AACA;AACA;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtD2C;AACuB;;AAElE;AACA;AACA;AACA;AACA,QAAQ,+DAAiB;AACzB,GAAG;AACH;;AAEA;AACA;AACA,QAAQ,2DAAiB;AACzB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,QAAQ,+DAAiB;AACzB,QAAQ,gEAAkB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5DuD;AACoB;;AAEpE;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,yCAAyC,+DAAyB;AAClE,QAAQ,gEAAsB;AAC9B,QAAQ,wEAAoB;AAC5B;AACA;AACA,YAAY,mEAAyB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC1CyC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAe;AAC3B;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;ACnCgF;AAC9B;;AAElD;AACA;AACA,yDAAyD,gCAAgC;AACzF;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,8BAA8B;AAC/C;AACA;;AAEA;AACA;AACA,yBAAyB,kEAAqB;AAC9C,mBAAmB,wBAAwB;AAC3C;AACA,uCAAuC,4FAA4F;AACnI;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,2BAA2B;AAC9C,iBAAiB,uEAAoB,4BAA4B,0EAAuB;AACxF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,kEAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtEA,WAAW,yCAAyC;AACpD,WAAW,mDAAmD;;AAE9D;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC7BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["let burger = document.querySelector('.hamburger');\nlet navBar = document.querySelector('nav');\nlet hideBackground = document.getElementById('task-section')\n\nfunction toggleClassOnEvent(eventKey ,className, item = eventKey){\n  eventKey.addEventListener('click', () => {\n    item.classList.toggle(className)\n})\n}\n\nexport function addMenuEvent(){\n    toggleClassOnEvent(burger, 'closed')\n    toggleClassOnEvent(burger, 'hide-content', hideBackground)\n    toggleClassOnEvent(burger, 'active', navBar)\n}\n\n","import {appendProjectName} from \"./selectTask\"\nimport {addClickListners, removeSelection, deleteButtonListner} from \"./projectEventListners\"\n\nclass newProject{\n    constructor(title){\n        this.title = title\n    }\n\n    createWrapper() {\n        let parent = document.querySelector('.project-list')\n        let wrapper = document.createElement('div');\n        wrapper.classList.add(\"list-wrapper\", \"project-folder\", \"hover-project\")\n        parent.appendChild(wrapper)\n        return wrapper\n    }\n\n    createTitle(){\n        let content = document.createElement('li')\n        content.textContent = this.title\n        return content\n    }\n\n    createDelete(){\n        let deleteButton = document.createElement('div');\n        deleteButton.classList.add(\"delete-icon\", \"delete-it\")\n        deleteButtonListner(deleteButton)\n        return deleteButton\n    }\n\n    createNewProject(){\n        let wrapper = this.createWrapper()\n        wrapper.append(this.createTitle(), this.createDelete())\n        addClickListners(wrapper)\n        return wrapper\n    }\n        \n}\n\nclass selectedProject extends newProject{\n    constructor(title){\n        super(title)\n    }\n\n    addSelection(){\n        removeSelection()\n        let wrapper = this.createNewProject()\n        wrapper.classList.add('selected-project')\n        wrapper.lastElementChild.classList.add('show-x')\n    }\n    \n}\n\n\nfunction createSelectedFolder(title) {\n    let selectedFolder = new selectedProject(title)\n    selectedFolder.addSelection()\n    appendProjectName(title)\n    return selectedFolder \n}\n\nfunction createNotSelectedFolder(title) {\n    let unselectedFolder = new newProject(title)\n    unselectedFolder.createNewProject()\n    return unselectedFolder\n}\n\nexport {createSelectedFolder, createNotSelectedFolder}","import {addMenuEvent} from \"./burgerMenu\"\n// import {updateFolders} from \"./Projectfolders\"\nimport {callAddProjectListner} from \"./projectTextfield\"\nimport {getLocalStorageProject} from \"./storage\"\nimport {addTaskListner} from \"./taskTextfield\"\nimport {addTaskButtonListner} from \"./popUpTaskForm\"\n//burger icon//\naddMenuEvent()\n//hover and click project//\ncallAddProjectListner()\n// window.onload = () => {\ngetLocalStorageProject()\naddTaskButtonListner()\n// addTaskListner()\n// updateFolders()\n// };\n","let addButton = document.getElementById(\"add-task-button\")\nlet taskPopUp = document.getElementById(\"task-form\")\nlet cancelButton = document.getElementById(\"cancel-button\")\nlet submitButton = document.getElementById(\"submit-button\")\nlet taskBackground = document.getElementById(\"child-wrapper\")\nlet hideSection = document.getElementById(\"task-section\")\nlet navBar = document.querySelector(\"nav\")\nlet taskName = document.getElementById(\"task-name\")\nlet dueDate = document.getElementById(\"task-due-date\")\nlet priority = document.getElementById(\"task-priority\")\nlet description = document.getElementById(\"task-description\")\n// hide-task-form\n\nexport function addTaskButtonListner() {\n    addButton.addEventListener('click', () => {\n    taskPopUp.classList.remove(\"hide-task-form\")\n    taskBackground.classList.add(\"blur-it\")\n    hideSection.classList.add(\"hide-content\")\n})\n\n    addButton.addEventListener('click', () => {\n    cancelButton.addEventListener('click', () => {\n        removePopUp()\n        clearForm()\n    })\n\n    navBar.addEventListener('click', () => {\n        if(!taskPopUp.classList.contains('hide-task-form')){\n            removePopUp()\n        }\n    })\n\n    taskPopUp.addEventListener('submit', function(e){\n        if (taskName.value){\n            clearForm()\n            e.preventDefault()\n            removePopUp()\n        }\n    })\n\n})\n}\n\nfunction removePopUp(){\n    taskPopUp.classList.add(\"hide-task-form\")\n    taskBackground.classList.remove(\"blur-it\")\n    hideSection.classList.remove(\"hide-content\")\n}\n\nfunction clearForm() {\n    taskName.value = '';\n    dueDate.value = '';\n    priority.selectedIndex = 0;\n    description.value = '';\n}\n","import {removeFromStorage} from \"./storage\"\nimport {selectFirstProject, appendProjectName} from \"./selectTask\"\n\nfunction addClickListners(item){\n    addHoverEffect(item, 'hover-x', item.lastElementChild)\n    item.addEventListener('click', () => {\n        renderSelectedClass(item)\n        appendProjectName(item.firstChild.textContent)\n  })\n}\n\nfunction deleteButtonListner(item) {\n    item.addEventListener('click', (e) => {\n        removeFromStorage(item.parentElement.firstElementChild.textContent)\n        renderProjectRemoval(item)\n        e.stopPropagation()\n    })\n}\n\nfunction renderProjectRemoval(item){\n        item.parentElement.remove()\n        appendProjectName('')\n        selectFirstProject()\n}\n\n//removes selection class and adds selection classes to new item\nfunction renderSelectedClass(item) {\n    removeSelection()\n    item.classList.add('selected-project')\n    item.lastElementChild.classList.add('show-x')\n}\n\n//uses mouseover and mouseleave to create a hover effect. The mouseover can be on one element and effect another\nfunction addHoverEffect(itemHovered, CSSclass, itemWitheffect = itemHovered){\n   itemHovered.addEventListener('mouseover', () => {\n       itemWitheffect.classList.add(CSSclass)\n   })\n   itemHovered.addEventListener('mouseleave', () => {\n    itemWitheffect.classList.remove('hover-x')\n})\n}\n\n//remove selection classes\nfunction removeSelection(){\n    updateProjectFoldersList().forEach(folder => {\n        removeClasses(folder.lastElementChild, 'show-x' )\n        removeClasses(folder, 'selected-project')\n    })\n}\n\n//if an item contains a class remove that class\nfunction removeClasses(item, CSSclass){\n    if (item.classList.contains(CSSclass)){\n        item.classList.remove(CSSclass)\n    }\n}\n\nfunction updateProjectFoldersList() {\n    let projectFolders = document.querySelectorAll('.project-folder');\n    return projectFolders\n}\n\nexport {addClickListners, removeSelection, deleteButtonListner}","import {createSelectedFolder} from \"./createNewProject\"\nimport {setLocalStorageProject, checkForFoldersOfSameName} from \"./storage\"\n\nexport function callAddProjectListner() {\n    let project = document.getElementById('add-project')\n    let addButton = document.getElementById(\"add-project-button\")\n    addButton.addEventListener('click', function(e){\n        addInputedProject(e, project)\n    })\n    project.addEventListener('keydown', function(e){\n        if(e.key == 'Enter'){\n            addInputedProject(e, project)\n        }\n    })\n}\n\nfunction addInputedProject(event, textField) {\n    if(validateFormIsNotBlank(textField, checkForFoldersOfSameName)){\n        setLocalStorageProject(textField.value)\n        createSelectedFolder(textField.value)\n        resetTextfield(textField, event)\n    }\n    else if(checkForFoldersOfSameName(textField.value)){\n        resetTextfield()\n        alert('This Project Folder Already Exists')\n    }\n    else{\n        clearInput(textField)\n    }\n}\n\nfunction validateFormIsNotBlank(textField, validationFunction){\n      return textField.value.trim().length > 0 && !validationFunction(textField.value) ? true : false\n}\n\nfunction resetTextfield(textField, event) {\n    clearInput(textField)\n    event.preventDefault()\n}\n\nfunction clearInput(textField) {\n    textField.value = '';\n}\n\nexport {validateFormIsNotBlank, resetTextfield, clearInput}","import {addStorageTasks} from \"./storage\"\n\nfunction selectFirstProject() {\n    let projects = document.querySelectorAll('.project-folder')\n    if (projects[0]){\n        projects[0].classList.add(\"selected-project\")\n        projects[0].lastElementChild.classList.add('show-x')\n        appendProjectName(projects[0].firstChild.textContent)\n    }\n}\n\nfunction appendProjectName(projectName) {\n    let taskNameWrapper = document.getElementById('selected-task')\n    taskNameWrapper.textContent = projectName\n}\n\nfunction getSelectedFolderName() {\n    let projects = document.querySelectorAll('.project-folder')\n    for(let i = 0; i < projects.length; i++){\n        if(projects[i].classList.contains('selected-project')){\n            return projects[i].firstChild.textContent\n    }\n}\n}\n\nfunction addTaskListner() {\n    let newTask = document.getElementById('addTaskForm')\n    newTask.addEventListener('submit', (e) => {\n        e.preventDefault()\n        let taskValue = document.getElementById('addTaskInput').value\n        console.log(taskValue)\n        if (taskValue){\n            addStorageTasks(getSelectedFolderName(), taskValue)\n        }\n    })\n}\n\n\nexport {selectFirstProject, appendProjectName, addTaskListner, getSelectedFolderName}","import {createSelectedFolder, createNotSelectedFolder} from \"./createNewProject\"\nimport {getSelectedFolderName} from \"./selectTask\"\n\nfunction getFolderAndTasks() {\n    if(!localStorage.getItem('Projects')){\n        localStorage.setItem('Projects',JSON.stringify([{\"title\": \"Default\", \"tasks\": []}]))\n    }\n    let folderTasks = JSON.parse(localStorage.getItem('Projects'))\n    return folderTasks\n}\n\nfunction setLocalStorageProject(project) {\n    let folder = getFolderAndTasks()\n    folder.push({\"title\": project, \"tasks\": []})\n    localStorage.setItem('Projects', JSON.stringify(folder))\n}\n\nfunction addStorageTasks(taskName, dueDate, priority, description) {\n    let localFolder = getFolderAndTasks()\n    let selectedFolder = getSelectedFolderName()\n    for (let i = 0; i < localFolder.length; i++){\n        if (localFolder[i].title == selectedFolder){\n            localFolder[i].tasks.push({\"taskName\": taskName, \"dueDate\": dueDate, \"priority\" : priority, \"description\": description})\n            break\n        }\n    }\n    localStorage.setItem('Projects', JSON.stringify(localFolder))\n}\n\nfunction getLocalStorageProject() {\n    let parsedProjects = getFolderAndTasks()\n    for (let i = 0; i < parsedProjects.length; i++){\n        i == 0 ? createSelectedFolder(parsedProjects[i].title) : createNotSelectedFolder(parsedProjects[i].title)\n    }\n}\n\nfunction checkForFoldersOfSameName(newProject){\n    let projects = getFolderAndTasks()\n    console.log(projects)\n    let check = false;\n    for (let folder of projects){\n        check = folder.title.replaceAll(/\\s/g,'') == newProject.replaceAll(/\\s/g,'') ? true : false;\n        if (check == true){\n            break\n        }\n    }\n    return check\n}\n\nfunction checkForTasksOfSameName(task) {\n    let projects = getFolderAndTasks()\n    let selectedProject = getSelectedFolderName()\n    for (let folder of projects){\n        if (folder.title == selectedProject){\n            if(folder.tasks.includes(task)){\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunction removeFromStorage(titleName){\n    let projects = getFolderAndTasks();\n    for (let index = 0; index < projects.length; index++){\n        if(projects[index].title == titleName){\n            projects.splice(index, 1)\n        }\n    }\n    localStorage.setItem('Projects', JSON.stringify(projects))\n}\n\nexport {setLocalStorageProject, getLocalStorageProject, checkForFoldersOfSameName, removeFromStorage, addStorageTasks, checkForTasksOfSameName}","// import {addStorageTasks, checkForTasksOfSameName} from \"./storage\"\n// import {validateFormIsNotBlank, resetTextfield, clearInput} from \"./projectTextfield\"\n\n// export function addTaskListner() {\n//     let task = document.getElementById('addTaskInput')\n//     let addButton = document.getElementById(\"addTaskButton\")\n//     addButton.addEventListener('click', function(e){\n//         addInputedTask(e, task)\n//     })\n//     task.addEventListener('keydown', function(e){\n//         if(e.key == 'Enter'){\n//             addInputedTask(e, task)\n//         }\n//     })\n// }\n\n// function addInputedTask(event, textField) {\n//     if(validateFormIsNotBlank(textField, checkForTasksOfSameName)){\n//         addStorageTasks(textField.value)\n//         resetTextfield(textField, event)\n//     }\n//     else if(checkForTasksOfSameName(textField.value)){\n//         resetTextfield(textField, event)\n//         alert('This Task Already Exists')\n//     }\n//     else{\n//         console.log('here')\n//         clearInput(textField)\n//     }\n// }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}